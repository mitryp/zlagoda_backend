swagger: "2.0"
info:
  title: Zlagoda API
  description: 
    The API description for AIS
  version: 1.0.0
schemes:
  - http
produces:
  - application/json
security: [BearerAuth: []]
paths:
  /login:
    post:
      summary: Виконати вхід за допомогою Basic Authentication
      tags: [Service]
      security: [BasicAuth: []]
      responses:
        200: 
          description: Вхід виконано успішно
          schema:
            $ref: '#/definitions/User'
        401:
          description: Некоректні облікові дані

  /login/validate:
    post:
      summary: Валідувати Bearer token, отриманий з клієнту
      tags: [Service]
      security: [BearerAuth: []]
      responses:
        200: 
          description: Токен валідний
        401:
          description: Токен невалідний


  /employees:
    get:
      summary: Отримати список працівників
      tags: [Employees]
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/sort_order'
        - $ref: '#/parameters/sort_field'
      responses:
        200:
          description: Список працівників магазину (менеджери та касири)
          schema:
            type: array
            items:
              $ref: '#/definitions/Employee'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
    post:
      summary: Створити нового працівника
      tags: [Employees]
      parameters:
        - name: data
          in: body
          schema: 
            $ref: '#/definitions/Employee'
      consumes:
        - application/json
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Employee'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'

  /employees/{id}:
    get:
      summary: Отримати інформацію про працівника за його id
      tags: [Employees]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: ОК
          schema: 
            $ref: '#/definitions/Employee'
        400: 
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404: 
          $ref: '#/responses/404-Not-Found'
    put:
      summary: Оновити інформацію про існуючого працівника
      tags: [Employees]
      parameters:
        - $ref: '#/parameters/id'
        - name: data
          in: body
          schema:
            $ref: '#/definitions/Employee'
      responses:
        200:
          description: Updated
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'
    delete:
      summary: Видалити інформацію про існуючого працівника
      tags: [Employees]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deleted
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'


  /products:
    get:
      summary: Отримати список типів товарів
      tags: [Products]
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/sort_order'
        - $ref: '#/parameters/sort_field'
      responses:
        200:
          description: Список типів товарів
          schema:
            type: array
            items: 
              $ref: '#/definitions/ProductWithCategory'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
    post:
      summary: Створити новий тип товарів
      tags: [Products]
      parameters:
        - name: data
          in: body
          schema: 
            $ref: '#/definitions/Product'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/ProductWithCategory'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'

  /products/{id}:
    get:
      summary: Отримати інформацію про тип товару за його id
      tags: [Products]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: ОК
          schema:
            $ref: '#/definitions/ProductWithCategory'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404: 
          $ref: '#/responses/404-Not-Found'
    put:
      summary: Оновити інформацію про існуючий тип товару
      tags: [Products]
      parameters:
        - $ref: '#/parameters/id'
        - name: data
          in: body
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: Updated
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'
    delete:
      summary: Видалити інформацію про існуючий тип товару
      tags: [Products]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deleted
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'


  /store_products:
    get:
      summary: Отримати список товарів у магазині
      tags: [Store products]
      parameters:
        - $ref: '#/parameters/sort_order'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/sort_field'
      responses:
        200:
          description: Список товарів
          schema:
            type: array
            items:
              $ref: '#/definitions/JoinedStoreProduct'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
    post:
      summary: Створити новий товар
      tags: [Store products]
      parameters:
        - name: data
          in: body
          schema: 
            $ref: '#/definitions/PostStoreProduct'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/JoinedStoreProduct'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'

  /store_products/{id}:
    get:
      summary: Отримати інформацію про товар за його id
      tags: [Store products]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: ОК
          schema:
            $ref: '#/definitions/JoinedStoreProduct'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404: 
          $ref: '#/responses/404-Not-Found'
    put:
      summary: Оновити інформацію про існуючий товар
      tags: [Store products]
      parameters:
        - $ref: '#/parameters/id'
        - name: data
          in: body
          schema:
            $ref: '#/definitions/StoreProduct'
      responses:
        200:
          description: Updated
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'
    delete:
      summary: Видалити інформацію про існуючий товар
      tags: [Store products]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deleted
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'
  
  
  /categories:
    get:
      summary: Отримати список категорій товарів
      tags: [Categories]
      parameters:
        - $ref: '#/parameters/sort_order'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/sort_field'
      responses:
        200:
          description: Список категорій
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
    post:
      summary: Створити нову категорію
      tags: [Categories]
      parameters:
        - name: data
          in: body
          schema: 
            $ref: '#/definitions/PostCategory'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Category'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'

  /categories/{id}:
    get:
      summary: Отримати інформацію про категорію товарів за її id
      tags: [Categories]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: ОК
          schema:
            $ref: '#/definitions/Category'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404: 
          $ref: '#/responses/404-Not-Found'
    put:
      summary: Оновити інформацію про існуючу категорію товарів
      tags: [Categories]
      parameters:
        - $ref: '#/parameters/id'
        - name: data
          in: body
          schema:
            $ref: '#/definitions/Category'
      responses:
        200:
          description: Updated
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'
    delete:
      summary: Видалити інформацію про існуючу категорію товарів
      tags: [Categories]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deleted
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'


  /clients:
    get:
      summary: Отримати список постійних клієнтів
      tags: [Clients]
      parameters:
        - $ref: '#/parameters/sort_order'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/sort_field'
      responses:
        200:
          description: Список клієнтів
          schema:
            type: array
            items:
              $ref: '#/definitions/Client'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
    post:
      summary: Створити нового клієнта
      tags: [Clients]
      parameters:
        - name: data
          in: body
          schema: 
            $ref: '#/definitions/Client'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Client'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'

  /clients/{id}:
    get:
      summary: Отримати інформацію про постійного клієнта за його id
      tags: [Clients]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: ОК
          schema:
            $ref: '#/definitions/Client'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404: 
          $ref: '#/responses/404-Not-Found'
    put:
      summary: Оновити інформацію про існуючого постійного клієнта
      tags: [Clients]
      parameters:
        - $ref: '#/parameters/id'
        - name: data
          in: body
          schema:
            $ref: '#/definitions/Client'
      responses:
        200:
          description: Updated
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'
    delete:
      summary: Видалити інформацію про існуючого постійного клієнта
      tags: [Clients]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deleted
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'


  /receipts:
    get:
      summary: Отримати список чеків
      tags: [Receipts]
      parameters:
        - $ref: '#/parameters/sort_order'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/sort_field'
      responses:
        200:
          description: Список чеків
          schema:
            type: array
            items:
              $ref: '#/definitions/TableReceipt'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
    post:
      summary: Створити новий чек
      tags: [Receipts]
      parameters:
        - name: data
          in: body
          schema: 
            $ref: '#/definitions/PostReceipt'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Receipt'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'

  /receipts/{id}:
    get:
      summary: Отримати інформацію про чек за його id
      tags: [Receipts]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: ОК
          schema:
            $ref: '#/definitions/Receipt'
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404: 
          $ref: '#/responses/404-Not-Found'
    delete:
      summary: Видалити інформацію про існуючий чек
      tags: [Receipts]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deleted
        400:
          $ref: '#/responses/400-Bad-Request'
        401:
          $ref: '#/responses/401-Anauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        404:
          $ref: '#/responses/404-Not-Found'      

parameters:
  offset:
    name: offset
    in: query
    required: false
    type: integer
    minimum: 0
    default: 0
    
  limit:
    name: limit
    in: query
    required: false
    type: integer
    minimum: 1
    maximum: 100
    default: 20
    
  sort_order:
    name: order
    in: query
    required: false
    type: string
    default: "asc"
    enum: [asc, desc]
    
  sort_field:
    name: sortBy
    in: query
    required: false
    type: string
  
  id:
    name: id
    in: path
    type: integer
    minimum: 0
    required: true
    
  query:
    name: query
    in: query
    type: string
    required: false
    
responses:
  400-Bad-Request:
    description: Bad Request
    schema:
      $ref: '#/definitions/Error'
  401-Anauthorized:
    description: Invalid Authorization
    schema:
      $ref: '#/definitions/Error'
  403-Forbidden:
    description: User is not authorized to perform the action
    schema:
      $ref: '#/definitions/Error'
  404-Not-Found:
    description: Not Found
    schema:
      $ref: '#/definitions/Error'

definitions:
  Error:
    properties:
      message:
        type: string
  
  User:
    properties:
      token:
        type: string
        description: Session Token
      userId:
        type: string
        description: ID працівника
      login:
        type: string
      name:
        allOf: 
          - $ref: '#/definitions/Name'
          - type: object
            description: "Ім'я працівника"

  Address:
    properties:
      city:
        type: string
      street:
        type: string
      index: 
        type: string
  
  Name:
    properties:
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string

  Employee:
    properties:
      employeeId:
        type: string
      name:
        $ref: '#/definitions/Name'
      position:
        type: string
        enum: [cashier, manager]
      salary:
        type: number
      workStartDate:
        type: integer
        description: Milliseconds since Unix epoch
      birthDate:
        type: integer
        description: Milliseconds since Unix epoch
      phone:
        type: string
      address:
        $ref: '#/definitions/Address'
      login:
        type: string

  SearchProduct:
    properties:
      upc:
        type: string
      productName:
        type: string
  
  Product:
    allOf:
      - $ref: '#/definitions/SearchProduct'
      - type: object
        properties:
          manufacturer:
            type: string
          specs:
            type: string
          categoryId:
            type: integer

  PostCategory:
    properties:
      categoryName:
        type: string

  Category:
    allOf: 
      - type: object
        properties:
          categoryId:
            type: integer
      - $ref: '#/definitions/PostCategory'
      
  
  ProductWithCategory:
    allOf: 
      - $ref: '#/definitions/Product'
      - $ref: '#/definitions/Category'
  
  PostStoreProduct:
    properties:
      upc:
        type: string
      price:
        type: number
      quantity:
        type: integer
        minimum: 0
      isProm:
        description: 'Cannot be forced to be created, hmmmm'
        type: boolean
  
  StoreProduct:
    allOf: 
      - type: object
        properties:
          productId:
            type: integer
      - $ref: '#/definitions/PostStoreProduct'

  JoinedStoreProduct:
    allOf: 
      - $ref: '#/definitions/ProductWithCategory'
      - $ref: '#/definitions/StoreProduct'

  Client:
    properties:
      clientId:
        type: string
      phone:
        type: string
      discount:
        type: number
      name:
        $ref: '#/definitions/Name'
      address:
        $ref: '#/definitions/Address'

  PostSale:
    properties:
      upc:
        type: string
      price:
        type: integer
      quantity:
        type: integer
        
  JoinedSale:
    allOf: 
      - type: object
        properties:
          productName:
            type: string
      - $ref: '#/definitions/PostSale'

  PostReceipt:
    properties:
      date:
        type: integer
      clientId:
        type: string
      employeeId:
        type: string
      sales:
        type: array
        items:
          $ref: '#/definitions/PostSale'

  Receipt:
    allOf: 
      - $ref: '#/definitions/PostReceipt'
      - $ref: '#/definitions/TableReceipt'
      - type: object
        properties:
          tax:
            type: number
          sales:
            type: array
            items:
              $ref: '#/definitions/JoinedSale'
  
  TableReceipt:
    properties:
      receiptId:
        type: integer
      cost:
        type: number
      clientName:
        $ref: '#/definitions/Name'
      employeeName:
        $ref: '#/definitions/Name'
  
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    type: apiKey
    in: header
    name: Authorization
    description: 'Schema: "Bearer \<token\>"'
    
    
  
  
  

  
